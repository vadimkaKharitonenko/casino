{"version":3,"sources":["components/Slot/Slot.jsx","components/Bet/Bet.jsx","components/Balance/Balance.jsx","components/Slots/Slots.jsx","App.js","serviceWorker.js","index.js"],"names":["Slot","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","shuffle","a","j","x","i","length","Math","floor","random","scrollGameLine","ReactDOM","findDOMNode","_slot","style","top","getRandomArbitrary","min","max","getCentralLine","_thirdSlotItem","state","allSymbols","allSymbolsRevert","allSymbolsX2","getCentralItem","_this2","countArr","gameLineFirst","gameLineSecond","gameLineThird","gameLine","concat","gameLineShow","map","item","react_default","createElement","key","ref","node","className","setTimeout","Component","Bet","betUp","currentBet","maxBet","setState","isUpdate","getBet","betDown","minBet","betUpNode","_betUp","betDownNode","_betDown","disabled","onClick","Balance","balance","getBalance","nextState","currentBalance","Slots","spin","barControl","_spinButton","centralWin","arrCentral","value","textContent","totalWin","arrWin","alert","_slots","components_Slot_Slot","serialNumber","components_Bet_Bet","_bet","components_Balance_Balance","App","components_Slots_Slots","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f980600.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Slot.scss';\r\n\r\nclass Slot extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      allSymbols: [\"A\",\"K\",\"K\",\"Q\",\"Q\",\"J\",\"J\",\"J\",\"J\",\"Wild\"], // все возможные символы\r\n      allSymbolsRevert: [\"Wild\",\"J\",\"J\",\"J\",\"J\",\"Q\",\"Q\",\"Q\",\"Q\",\"K\",\"K\",\"A\"], // массив для второй составляющей игровую линию\r\n      allSymbolsX2: [\"A\",\"K\",\"K\",\"Q\",\"Q\",\"J\",\"J\",\"J\",\"J\",\"Q\",\"Q\",\"K\",\"K\",\"A\"], // массив для третьей составляющей игровую линию\r\n    }\r\n  }\r\n\r\n  shuffle = (a) => { // функция для случайного перемешивания\r\n    var j, x, i;\r\n    for (i = a.length - 1; i > 0; i--) {\r\n        j = Math.floor(Math.random() * (i + 1));\r\n        x = a[i];\r\n        a[i] = a[j];\r\n        a[j] = x;\r\n    }\r\n    return a;\r\n  }\r\n\r\n  componentDidUpdate() { //  функция для прокрутки линий наверх\r\n    const slotDom = ReactDOM.findDOMNode(this._slot);\r\n    slotDom.style.top = \"-2000px\";\r\n    this.props.getCentralItem(this.getCentralLine());\r\n  }\r\n\r\n  scrollGameLine = () => { //  функция для прокрутки линий вниз\r\n    const slotDom = ReactDOM.findDOMNode(this._slot);\r\n    slotDom.style.top = \"-100px\";\r\n  }\r\n\r\n  getRandomArbitrary = (min, max) => { //  определяем величину задержки перед прокруткой линии\r\n    return Math.random() * (max - min) + min;\r\n  }\r\n\r\n  getCentralLine = () => {\r\n    return ReactDOM.findDOMNode(this._thirdSlotItem);\r\n  }\r\n\r\n  render() {\r\n    this.countArr = -1; // счетчик для определения элемента в линии\r\n    \r\n    this.gameLineFirst = this.shuffle(this.state.allSymbols);  // формируем первую линию\r\n    this.gameLineSecond = this.shuffle(this.state.allSymbolsRevert); // формируем вторую линию\r\n    this.gameLineThird = this.shuffle(this.state.allSymbolsX2); // формируем третью линию\r\n    \r\n    this.gameLine = this.gameLineThird.concat(this.gameLineFirst.concat(this.gameLineSecond)); // складываем все линии и получаем конечную линию\r\n    this.gameLineShow = this.gameLine.map((item) => {\r\n      this.countArr += 1;\r\n      if (this.countArr === 2) { // находим центральные элементы \r\n        return <div key={Math.random()} ref={(node) => {this._thirdSlotItem = node;}} className=\"Slot__item\">{item}</div>\r\n      } else {\r\n        return <div key={Math.random()} className=\"Slot__item\">{item}</div>\r\n      }\r\n    })\r\n\r\n    setTimeout(() => { // функция для задержки перед скроллом линии\r\n      this.scrollGameLine();\r\n    }, this.getRandomArbitrary(1000,2000));\r\n    return (\r\n      <div className=\"Slot\" ref={(node) => {this._slot = node;}}>\r\n        {this.gameLineShow}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Slot;\r\n","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Bet.scss';\r\n\r\nclass Bet extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isUpdate: false,\r\n    }\r\n\r\n    this.currentBet = 20; // текущая ставка\r\n    this.maxBet = 100; // максимальная ставка\r\n    this.minBet = 20; // минимальная ставка\r\n  }\r\n\r\n  betUp = () => { // поднять ставку\r\n    if (this.currentBet === this.maxBet) {\r\n       \r\n    } else {\r\n      this.currentBet = this.currentBet + 20;\r\n      this.setState({ // обновить компонент\r\n        isUpdate: true,\r\n      });\r\n    }\r\n\r\n    this.props.getBet(this.currentBet); // передаем в родителя текущую ставку\r\n  }\r\n\r\n  betDown = () => { // понизить ставку \r\n    if (this.currentBet === this.minBet) {\r\n       \r\n    } else {\r\n      this.currentBet = this.currentBet - 20; \r\n      this.setState({ // обновить компонент\r\n        isUpdate: true,\r\n      });\r\n    }\r\n\r\n    this.props.getBet(this.currentBet); // передаем в родителя текущую ставку\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const betUpNode = ReactDOM.findDOMNode(this._betUp);     // получаем ноду кнопки повышения ставки\r\n    const betDownNode = ReactDOM.findDOMNode(this._betDown); // и понижения ставки\r\n    betUpNode.disabled = true;                               // делаем их неактивными на время вращения спина\r\n    betDownNode.disabled = true;\r\n\r\n    setTimeout(() => {                                       // а затем опять активируем\r\n      betUpNode.disabled = false;\r\n      betDownNode.disabled = false;\r\n    }, 3000);\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"Bet\">\r\n        Ставка: {this.currentBet}\r\n        <div className=\"bet-control\">\r\n          <button className=\"betUp\" onClick={this.betUp} ref={(node) => {this._betUp = node;}}>Up</button>\r\n          <button className=\"betDown\" onClick={this.betDown} ref={(node) => {this._betDown = node;}}>Down</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Bet;","import React, { Component } from 'react';\r\nimport './Balance.scss';\r\n\r\nclass Balance extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      balance: 5000, // баланс\r\n      isUpdate: false,\r\n    }\r\n\r\n    this.props.getBalance(this.state.balance); // отправляем значение баланса в родителя\r\n  }\r\n\r\n  shouldComponentUpdate(nextState) { // обновляем\r\n    if(this.state.isUpdate !== nextState.isUpdate) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"balance\">Баланс: {this.props.currentBalance}</div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Balance;","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Slots.scss';\r\nimport Slot from '../Slot/Slot';\r\nimport Bet from '../Bet/Bet';\r\nimport Balance from '../Balance/Balance'; \r\n\r\nclass Slots extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isUpdate: false,\r\n      arrWin: [10,30,50,70,100],\r\n    }\r\n\r\n    this.balance = 5000;\r\n    this.currentBet = 20; // ставка\r\n    this.arrCentral = []; // массив с центральными элементами\r\n    this.totalWin = 0;\r\n  }\r\n\r\n  spin = () => { // крутить спин\r\n    this.setState({\r\n      isUpdate: true,\r\n    });\r\n\r\n    const barControl = ReactDOM.findDOMNode(this._spinButton); // находим кнопку спина\r\n\r\n    barControl.disabled = true;                                // и деактивируем ее\r\n\r\n    setTimeout(() => {\r\n      barControl.disabled = false;                             // а после прокрутки, снова активируем\r\n    },3000);                                                   \r\n\r\n\r\n    this.balance -= this.currentBet; // вычитаем из баланса сумму ставки\r\n\r\n    setTimeout(() => { // вызываем функцию, определяющую выигрыш и обнуляем старые значение в центральной линии\r\n      this.centralWin();\r\n      this.arrCentral = [];\r\n    }, 3000);\r\n  }\r\n\r\n  getBet = (value) => { // получить текущую ставку из ребенка Bet\r\n    this.currentBet = value;\r\n  } \r\n\r\n  getBalance = (value) => { // родитель получает баланс\r\n    this.balance = value;\r\n  }\r\n\r\n  getCentralItem = (value) => { // получаем значения итемов в центральной горизонтали\r\n    this.arrCentral[this.arrCentral.length] = value;\r\n  }\r\n\r\n  centralWin = () => { // определяет выигрыш по центральной горизонтали\r\n    if ((this.arrCentral[0].textContent === this.arrCentral[1].textContent)\r\n    &&(this.arrCentral[1].textContent === this.arrCentral[2].textContent)) {\r\n      switch(this.arrCentral[0].textContent) { // считаем сумму выигрыша\r\n        case 'J':\r\n          this.totalWin = this.state.arrWin[0] * 3 * this.currentBet * 0.2;\r\n          break;\r\n        case 'Q':\r\n          this.totalWin = this.state.arrWin[1] * 3 * this.currentBet * 0.2;\r\n          break; \r\n        case 'K':\r\n          this.totalWin = this.state.arrWin[2] * 3 * this.currentBet * 0.2;\r\n          break;\r\n        case 'A':\r\n          this.totalWin = this.state.arrWin[3] * 3 * this.currentBet * 0.2;\r\n          break;\r\n        case 'Wild':\r\n          this.totalWin = this.state.arrWin[4] * 3 * this.currentBet * 0.2;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    this.balance += this.totalWin; // прибавляем выигрыш к балансу\r\n\r\n    if (this.totalWin !== 0) {\r\n      alert('You won: ' + this.totalWin);\r\n      this.setState({\r\n        isUpdate: true,\r\n      });\r\n      this.totalWin = 0; // обнуляем значение выигрыша\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextState) { // обновляем\r\n    if(this.state.isUpdate !== nextState.isUpdate) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Slots-container\">\r\n        <section className=\"Slots\" ref={(node) => {this._slots = node;}}>\r\n          <Slot key=\"1\" serialNumber={1} getCentralItem={this.getCentralItem}/>\r\n          <Slot key=\"2\" serialNumber={2} getCentralItem={this.getCentralItem}/>\r\n          <Slot key=\"3\" serialNumber={3} getCentralItem={this.getCentralItem}/>\r\n        </section>\r\n        <section className=\"Bar-Control\">\r\n          <div className=\"bet\">\r\n            <Bet getBet={this.getBet} ref={(node) => {this._bet = node;}}/>\r\n          </div>\r\n          <button className=\"Spin\" onClick={this.spin} ref={(node) => {this._spinButton = node;}}>SPIN</button>\r\n          <Balance getBalance={this.getBalance} \r\n                   currentBalance={this.balance}/>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Slots;\r\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Slots from './components/Slots/Slots';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Slots/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}