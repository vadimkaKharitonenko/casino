{"version":3,"sources":["components/Slot/Slot.jsx","components/Bet/Bet.jsx","components/Slots/Slots.jsx","App.js","serviceWorker.js","index.js"],"names":["Slot","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","shuffle","a","j","x","i","length","Math","floor","random","scrollGameLine","ReactDOM","findDOMNode","_slot","style","top","getRandomArbitrary","min","max","state","allSymbols","allSymbolsRevert","allSymbolsX2","_this2","gameLineFirst","gameLineSecond","gameLineThird","gameLine","concat","gameLineShow","map","item","react_default","createElement","key","className","setTimeout","ref","node","Component","Bet","betUp","currentBet","maxBet","setState","isUpdate","getBet","betDown","minBet","onClick","Slots","spin","balance","value","nextState","_slots","components_Slot_Slot","serialNumber","components_Bet_Bet","App","components_Slots_Slots","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07fddade.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Slot.scss';\r\n\r\nclass Slot extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      allSymbols: [\"A\",\"K\",\"Q\",\"J\",\"Wild\"], // все возможные символы\r\n      allSymbolsRevert: [\"Wild\",\"J\",\"Q\",\"K\",\"A\"], // массив для второй составляющей игровую линию\r\n      allSymbolsX2: [\"A\",\"K\",\"Q\",\"J\",\"Wild\",\"Wild\",\"J\",\"Q\",\"K\",\"A\"], // массив для третьей составляющей игровую линию\r\n    }\r\n  }\r\n\r\n  shuffle = (a) => { // функция для случайного перемешивания\r\n    var j, x, i;\r\n    for (i = a.length - 1; i > 0; i--) {\r\n        j = Math.floor(Math.random() * (i + 1));\r\n        x = a[i];\r\n        a[i] = a[j];\r\n        a[j] = x;\r\n    }\r\n    return a;\r\n  }\r\n\r\n  componentDidUpdate() { //  функция для прокрутки линий наверх\r\n    const slotDom = ReactDOM.findDOMNode(this._slot);\r\n    slotDom.style.top = \"-2000px\";\r\n  }\r\n\r\n  scrollGameLine = () => { //  функция для прокрутки линий вниз\r\n    const slotDom = ReactDOM.findDOMNode(this._slot);\r\n    slotDom.style.top = \"-100px\";\r\n  }\r\n\r\n  getRandomArbitrary = (min, max) => { //  определяем величину задержки перед прокруткой линии\r\n    return Math.random() * (max - min) + min;\r\n  }\r\n\r\n  render() {\r\n    this.gameLineFirst = this.shuffle(this.state.allSymbols);  // формируем первую линию\r\n    this.gameLineSecond = this.shuffle(this.state.allSymbolsRevert); // формируем вторую линию\r\n    this.gameLineThird = this.shuffle(this.state.allSymbolsX2); // формируем третью линию\r\n    this.gameLine = this.gameLineThird.concat(this.gameLineFirst.concat(this.gameLineSecond)); // складываем все линии и получаем конечную линию\r\n    this.gameLineShow = this.gameLine.map((item) => {\r\n      return <div key={Math.random()} className=\"Slot__item\">{item}</div>\r\n    })\r\n    setTimeout(() => { // функция для задержки перед скроллом линии\r\n      this.scrollGameLine();\r\n    }, this.getRandomArbitrary(1000,2000));\r\n    return (\r\n      <div className=\"Slot\" ref={(node) => {this._slot = node;}}>\r\n        {this.gameLineShow}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Slot;\r\n","import React, { Component } from 'react';\r\nimport './Bet.scss';\r\n\r\nclass Bet extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isUpdate: false,\r\n    }\r\n\r\n    this.currentBet = 20; // текущая ставка\r\n    this.maxBet = 100; // максимальная ставка\r\n    this.minBet = 20; // минимальная ставка\r\n  }\r\n\r\n  betUp = () => { // поднять ставку\r\n    if (this.currentBet === this.maxBet) {\r\n       \r\n    } else {\r\n      this.currentBet = this.currentBet + 20;\r\n      this.setState({ // обновить компонент\r\n        isUpdate: true,\r\n      });\r\n    }\r\n\r\n    this.props.getBet(this.currentBet); // передаем в родителя текущую ставку\r\n  }\r\n\r\n  betDown = () => { // понизить ставку \r\n    if (this.currentBet === this.minBet) {\r\n       \r\n    } else {\r\n      this.currentBet = this.currentBet - 20; \r\n      this.setState({ // обновить компонент\r\n        isUpdate: true,\r\n      });\r\n    }\r\n\r\n    this.props.getBet(this.currentBet); // передаем в родителя текущую ставку\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"Bet\">\r\n        Ставка: {this.currentBet}\r\n        <div className=\"bet-control\">\r\n          <button className=\"betUp\" onClick={this.betUp}>Up</button>\r\n          <button className=\"betDown\" onClick={this.betDown}>Down</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Bet;","import React, { Component } from 'react';\r\nimport './Slots.scss';\r\nimport Slot from '../Slot/Slot';\r\nimport Bet from '../Bet/Bet';\r\n\r\nclass Slots extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isUpdate: false,\r\n      balance: 5000, // баланс\r\n    }\r\n\r\n    this.currentBet = 20; // ставка\r\n  }\r\n\r\n  spin = () => { // крутить спин\r\n    this.setState({\r\n      isUpdate: true,\r\n      balance: this.state.balance - this.currentBet,\r\n    });\r\n  }\r\n\r\n  getBet = (value) => { // получить текущую ставку из ребенка Bet\r\n    this.currentBet = value;\r\n  } \r\n\r\n  shouldComponentUpdate(nextState) { // обновляем\r\n    if(this.state.isUpdate !== nextState.isUpdate) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Slots-container\">\r\n        <section className=\"Slots\" ref={(node) => {this._slots = node;}}>\r\n          <Slot key=\"1\" serialNumber={1}/>\r\n          <Slot key=\"2\" serialNumber={2}/>\r\n          <Slot key=\"3\" serialNumber={3}/>\r\n        </section>\r\n        <section className=\"Bar-Control\">\r\n          <div className=\"bet\">\r\n            <Bet getBet={this.getBet}/>\r\n          </div>\r\n          <button className=\"Spin\" onClick={this.spin}>SPIN</button>\r\n          <div className=\"balance\">Баланс: {this.state.balance}</div>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Slots;\r\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Slots from './components/Slots/Slots';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Slots/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}